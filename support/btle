#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# BLUETOOTH SCANNING AND PACKET PROCESSING
#
# ----------------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------------
# BLUETOOTH LE BACKGROUND SCANNING
# ----------------------------------------------------------------------------------------
btle_scanner () {
	while true; do 
		#TIMEOUT THE HCITOOL SCAN TO RESHOW THE DUPLICATES WITHOUT SPAMMING THE MAIN LOOP BY USING THE --DUPLICATES TAG
		local hcitool_raw=$(timeout --signal SIGINT 17 hcitool -i $PREF_HCI_DEVICE lescan 2>&1)

		#FIND ERROR VALUES 
		local error=$(echo "$hcitool_raw" | grep -iE 'input/output error|invalid device|invalid|error|network')

		#PUBLISH ERRORS BACK TO MAIN LOOP
		if [ -n "$error" ]; then 

			(>&2 echo "error! attempting to correct $PREF_HCI_DEVICE hardware fault.")

			#POWER CYCLE
			hciconfig $PREF_HCI_DEVICE down
			sleep 5 
			hciconfig $PREF_HCI_DEVICE up

			sleep 5
		fi 

		#NEED DELAY TO BE SURE WE'RE NOT RESTARTING HARDWARE TOO QUICKLY
		sleep 2
	done

	#REPORT ERROR
	(>&2 echo "error! irrecoverable btle_scanner error")
}

#----------------------------------------------------------------------------------------
# PROCESS BLUETOOTH PACKETS
# ----------------------------------------------------------------------------------------

btle_text_processor () {
	local received_mac_address
	local packet
	local pdu_type
	local rssi_value
	local gap_name_str
	local should_ignore
	local manufacturer
	local flags
	local device_type

 	if [ -n "$1" ]; then 
 		#DEFINE PACKET VARIABLE
 		packet="$1"
		
		#EXTRACT DATA 
		if [[ $packet =~ Address:\ ([^|\(]*)\  ]]; then 
			received_mac_address=${BASH_REMATCH[1]}
			received_mac_address=${received_mac_address^^}
			received_mac_address=${received_mac_address##*( )}
		fi 

		if [[ $packet =~ Event\ type:\ ([^|\(]*)\  ]]; then 
			pdu_type=${BASH_REMATCH[1]}
			pdu_type=${pdu_type##* }
		fi 

		if [[ $packet =~ Random ]] || [[ $packet =~ Public ]]; then 
			tx_type=${BASH_REMATCH^^}
			tx_type=${tx_type:0:4}
		fi 

		if [[ $packet =~ RSSI[^:]*?:([^|\(]*) ]]; then 
			rssi_value=${BASH_REMATCH[1]}
			rssi_value=${rssi_value//[^-0-9]/}
		fi 

		if [[ $packet =~ Name[^:]{0,}:\ {0,}([^|\(]*)\ {0,}(\||$|\() ]]; then 
			gap_name_str=${BASH_REMATCH[1]}
			[[ -z "$gap_name_str" ]] && gap_name_str="Unknown"
		fi 

		if [[ $packet =~ Company:\ {0,}([^|\(]*)\ {0,}(\||$|\() ]]; then 
			manufacturer=${BASH_REMATCH[1]}
			[[ -z "$manufacturer" ]] && manufacturer="Unknown"
		fi 

		if [[ $packet =~ Data:\ {0,}([^|\(]*)\ {0,}(\||$|\() ]]; then 
			adv_data=${BASH_REMATCH[1]}
			adv_data=${adv_data##*( )}
			[[ -z "$adv_data" ]] && adv_data="00"
		fi 

		if [[ $packet =~ Type:\ {0,}([^|\(]*)\ (\||$|\() ]]; then 
			device_type=${BASH_REMATCH[1]}
			device_type=${device_type##*( )}
			[[ -z "$device_type" ]] && device_type="Unknown"
		fi 

		if [[ $packet =~ Flags:\ {0,}([^|\(]*)(\||$|\() ]]; then 
			flags=${BASH_REMATCH[1]}
			flags=${flags##*( )}
			[[ -z "$flags" ]] && flags="Unknown"
		fi 

		if [[ $packet =~ 1\ entry\|\ {1,}([^|\(]*)\ {1,}(\||$|\() ]]; then 
			oem_data=${BASH_REMATCH[1]}
			oem_data=${oem_data##*( )}
			[[ -z "$oem_data" ]] && oem_data="Unknown"
		fi 

		
		#FILTER BASED ON RESPONSE/DATA TYPE		
        if [ "$pdu_type" == "ADV_IND" ] || [ "$pdu_type" == "ADV_NONCONN_IND" ] || [ "$pdu_type" == "SCAN_RSP" ] ; then 
			#SEND TO MAIN LOOP ONLY IF PASSES RSSI  THRESHOLD

			should_ignore=false 
			[ "$tx_type" == "RAND" ] && [ -n "$rssi_value" ] && [[ "$PREF_RSSI_IGNORE_BELOW" -gt "$rssi_value" ]] && should_ignore=true 

			#IF WE HAVE A NAME, DEFINITELY REPORT
			[ -n "$gap_name_str" ] && should_ignore=false 

			#IF PUBLIC ADV, SET PUBLIC
			[ "$tx_type" == "PUBL" ] && should_ignore=false 

			if [ "$should_ignore" == false ]; then 
				#REPORT TO MAIN LOOP
				echo "$tx_type$received_mac_address|$pdu_type|$gap_name_str|$rssi_value|$adv_data|$manufacturer|$device_type|$flags|$oem_data" > main_pipe & 
			fi 
		fi 
	fi
}

# ----------------------------------------------------------------------------------------
# BLUETOOTH LE RAW PACKET ANALYSIS
# ----------------------------------------------------------------------------------------
btle_text_listener () {
        #LOCAL VALUES 
	local packet
	local line 
		
	#DEFINE VARAIBLES
	while IFS= read -r line; do
		if [[ $line =~ ^\> ]] || [[ $line =~ ^\< ]] || [[ $line =~ RSSI ]]; then
			[[ $line =~ RSSI ]] && packet="$packet|$line"
			[[ $packet =~ ^\> ]] && btle_text_processor "$packet"
			packet=""
			packet=$line
		else 		
			packet="$packet|$line" 
		fi
	done < <(stdbuf -o0 btmon 2>&1)

	#REPORT ERROR
	(>&2 echo "error! irrecoverable btle_text_listener error")
}

