#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# HELP FILE AND GENERAL PREFERENCES
#
# ----------------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------------
# HELP TEXT
# ----------------------------------------------------------------------------------------

show_help_text() {
	#SHOW HELPFULE
	echo "

	monitor.sh
	$VERSION
	
	Andrew J Freyer, 2018
	GNU General Public License
	
	This is a shell script and helper scripts that passively monitor
	for specified bluetooth devices. By default, most BTLE devices
	repeatedly advertise their presence with a random mac address at a
	random interval. The randomness is to maintain privacy and to prevent
	device tracking by bad actors or advertisers. However, by knowing the 
	static bluetooth mac address of a specified bluetooth device before hand,
	a random advertisement can be used as a trigger to affirmatively and 
	securely scan for the presence of that known device. This construction
	enables the script to rapidly detect the arrival of a specified bluetooth
	device, while reducing the number of times an affirmative scan operation
	is required (which may interfere with 2.4GHz Wi-Fi).
	
	
	usage:
	  monitor -h 		show usage information
	  monitor -v		print version number
	  monitor -d		restore to default settings
	  monitor -u		update 'monitor.service' to current command line settings
				(excluding -u and -d flags)

	  monitor -r		repeatedly scan for arrival & departure of known devices
	  monitor -b		scan for & report BTLE beacon advertisements
	  monitor -a		report all scan results, not just presence changes
	  monitor -P		scan for & report public address advertisements
	  monitor -t		scan only on mqtt trigger messages:
					[topic path]/scan/ARRIVE
					[topic path]/scan/DEPART


	"
}

# ----------------------------------------------------------------------------------------
# PROCESS OPTIONS (technique: https://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash)
# ----------------------------------------------------------------------------------------

OPTIND=1

#PREFERENCES
PREF_PERIODIC_MODE=false
PREF_BEACON_MODE=false
PREF_TRIGGER_MODE=false
PREF_PUBLIC_MODE=false
PREF_REPORT_ALL_MODE=false
PREF_RESTORE_DEFAULTS=false
PREF_UPDATE_SERVICE=false

while getopts "h?vrbutPad" opt; do
    case "$opt" in
    h|\?)
        show_help_text
        exit 0
        ;;
    v)  
		echo "$VERSION"
		exit 0
		;;
    d)  PREF_RESTORE_DEFAULTS=true 	&& echo "> restoring default settings"
		;;
    r)  PREF_PERIODIC_MODE=true 	&& echo "> repeated scan mode enabled"
		;;
	u)  PREF_UPDATE_SERVICE=true 	&& echo "> updating monitor.service"
		;;
    b)  PREF_BEACON_MODE=true 		&& echo "> beacon scan mode enabled"
		;;
    P)  PREF_PUBLIC_MODE=true 		&& echo "> public node scan mode enabled"
		;;
	t)  PREF_TRIGGER_MODE=true 		&& echo "> trigger only mode enabled"
		;;
	a)  PREF_REPORT_ALL_MODE=true 	&& echo "> report all scan results mode enabled"
		;;
    esac
done

#RESET OPTION INDEX
shift $((OPTIND-1))

#SHIFT IF NECESSARY
[ "$1" = "--" ] && shift

