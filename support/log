#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# PRINTING AND DEBUGGING
#
# ----------------------------------------------------------------------------------------


# ----------------------------------------------------------------------------------------
# PRETTY PRINT FOR DEBUG
# ----------------------------------------------------------------------------------------

#VARIABLES FOR LOGGING LOGSPAM PREVENTION
last_log_line=""
duplicate_log_count=1

#FORK THE LOG FROM THE MAIN THREAD 
log_listener () {

	#LOG PIPE
	while true; do 
		#SHOULD EXIT? 
		[ "$PREF_DISABLE_LOGGING" == true ] && return 0 
		
		#READ FROM THE MAIN PIPE
		local line 
		while read line; do 

			#ECHO TO CONSOLE, REMOVING EXTRA SPACES	
			should_repeat=""
			line_append=""

			#IS THIS LINE DUPLICATED?
			if [ "$last_log_line" == "$line" ] ; then 
				duplicate_log_count=$((duplicate_log_count + 1 ))
				line_append=" (x$duplicate_log_count)"
				should_repeat=$REPEAT

			else 
				duplicate_log_count=1
			fi  

			if [ "$PREF_REDACT" == true ]; then 
				line=$(echo "$line" | sed "s/\([0-9A-Fa-f]\{2\}:\)\{5\}/ [REDACTED]:/g;s/\([0-9A-Fa-f-]\{36\}\)/ [REDACTED]/g" )
				line="$line"
			fi 

			#ECHO LAST LINE
			printf "${should_repeat}$version $(date "+%I:%M:%S %p") $line$line_append\n"
			last_log_line="$line"

		done < log_pipe
	done 
}


#PRINT TO LOG UNLESS DUPLICATE LINE
log() {
	#SEND TO LOG PIPE
	[ "$PREF_DISABLE_LOGGING" == false ] && printf "$1\n" | sed 's/  */ /g' > log_pipe
}