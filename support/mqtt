#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# MQTT SCANNING
#
# ----------------------------------------------------------------------------------------

# ----------------------------------------------------------------------------------------
# CLEAR RETAINED 
# ----------------------------------------------------------------------------------------
mqtt_broker_clean (){
	#MQTT LOOP
	while read instruction; do 
		#GET THE TOPIC PATH
		local topic=$(echo "$instruction" | awk -F " {" '{print $1}')

		#PUBLISH CLEARING MESSAGE
                if [ "$mqtt_cafile" ]; then
                   $mosquitto_pub_path -r -n -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$topic" --cafile "$mqtt_cafile" 
                else
                   $mosquitto_pub_path -r -n -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$topic"
                fi

	done < <(if [ "$mqtt_cafile" ]; then $(which mosquitto_sub) -v -W 10 -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" --cafile "$mqtt_cafile" -t "$mqtt_topicpath/#"; else $(which mosquitto_sub) -v -W 10 -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/#"; fi ) 
}

# ----------------------------------------------------------------------------------------
# MQTT LISTENER
# ----------------------------------------------------------------------------------------
mqtt_listener (){
	#MQTT LOOP
	while read instruction; do 
		echo "MQTT$instruction" > main_pipe 
	done < <(if [ "$mqtt_cafile" ]; then $(which mosquitto_sub) -v -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/scan/#" --cafile "$mqtt_cafile" --will-topic "$mqtt_topicpath/owner/$mqtt_publisher_identity" --will-payload "{\"status\":\"offline\"}"; else $(which mosquitto_sub) -v -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/scan/#" --will-topic "$mqtt_topicpath/owner/$mqtt_publisher_identity" --will-payload "{\"status\":\"offline\"}"; fi ) 
}
# ----------------------------------------------------------------------------------------
# PUBLISH MESSAGE
# ----------------------------------------------------------------------------------------

publish_presence_message () {
	if [ ! -z "$1" ]; then 

		#SET NAME FOR 'UNKONWN'
		local name="$3"
		local confidence="$2"
		local should_retain=""
		local retain_flag="false"

		[ -z "$confidence" ] && confidence=0

		#IF NO NAME, RETURN "UNKNOWN"
		if [ -z "$name" ]; then 
			name="Unknown"
		fi 

		#APPEND INFORMATION FOR BTLE BEACONS
		local append=""
		[ ! -z "$5" ] && append=",\"type\":\"$5\""
		[ ! -z "$6" ] && append="$append, \"rssi\":\"$6\""
		[ ! -z "$7" ] && append="$append, \"power\":\"$7\""
		
		#TIMESTAMP
		stamp=$(date "+%a %b %d %Y %H:%M:%S GMT%z (%Z)")

		#DEBUGGING 
		(>&2 log "${PURPLE}$mqtt_topicpath/$1 { version : $version, confidence : $confidence, name : $name, timestamp : $stamp, manufacturer : $4 , type : $5 $append } ${NC}")

		#CLEAR PREVIOUS RETAINED MESSAGE
		if [ "$PREF_SHOULD_RETAIN" == true ]; then 
                        if [ "$mqtt_cafile" ]; then
			   $mosquitto_pub_path -r -n -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" --cafile "$mqtt_cafile" -t "$mqtt_topicpath/$1"
                        else
                           $mosquitto_pub_path -r -n -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/$1"
                        fi
			should_retain="-r "
			retain_flag="true"
			sleep 1
		fi 
		
		#POST TO MQTT
                if [ "$mqtt_cafile" ]; then
		   $mosquitto_pub_path $should_retain -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/$1" --cafile "$mqtt_cafile" -m "{\"retained\":\"$retain_flag\", \"version\":\"$version\", \"confidence\":\"$2\",\"name\":\"$name\",\"timestamp\":\"$stamp\",\"manufacturer\":\"$4\"$append}"
                else
                   $mosquitto_pub_path $should_retain -h "$mqtt_address" -p "$mqtt_port" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/$1" -m "{\"retained\":\"$retain_flag\", \"version\":\"$version\", \"confidence\":\"$2\",\"name\":\"$name\",\"timestamp\":\"$stamp\",\"manufacturer\":\"$4\"$append}"
                fi

	fi
}

publish_cooperative_scan_message () {
	if [ ! -z "$1" ]; then 
		#DEBUGGING 
		(>&2 log "${PURPLE}$mqtt_topicpath/scan/$1${NC}")

		#POST TO MQTT
                if [ "$mqtt_cafile" ]; then
		   $mosquitto_pub_path -h "$mqtt_address" -u "$mqtt_user" -P "$mqtt_password" --cafile "$mqtt_cafile" -t "$mqtt_topicpath/scan/$1" -m "{\"identity\":\"$mqtt_publisher_identity\"}"
                else
                   $mosquitto_pub_path -h "$mqtt_address" -u "$mqtt_user" -P "$mqtt_password" -t "$mqtt_topicpath/scan/$1" -m "{\"identity\":\"$mqtt_publisher_identity\"}"
                fi
	fi 
}
