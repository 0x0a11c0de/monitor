#!/bin/bash

# ----------------------------------------------------------------------------------------
# GENERAL INFORMATION
# ----------------------------------------------------------------------------------------
#
# Written by Andrew J Freyer
# GNU General Public License
# http://github.com/andrewjfreyer/monitor
#
# SETUP NECESSARY FILES 
#
# ----------------------------------------------------------------------------------------

#----------------------------------------------------------------------------------------
# CHECK DEPENDENCES
# ----------------------------------------------------------------------------------------

#FIND DEPENDENCY PATHS, ELSE MANUALLY SET
service_path="/etc/systemd/system/monitor.service"
mosquitto_pub_path=$(which mosquitto_pub)
mosquitto_sub_path=$(which mosquitto_sub)
hcidump_path=$(which hcidump)
bc_path=$(which bc)
git_path=$(which git)

#ERROR CHECKING FOR MOSQUITTO PUBLICATION 
should_exit=false
[ -z "$mosquitto_pub_path" ] && echo "Error: Required package 'mosquitto_pub' not found. Please install 'mosquitto'." && should_exit=true
[ -z "$mosquitto_sub_path" ] && echo "Error: Required package 'mosquitto_sub' not found. Please install 'mosquitto'." && should_exit=true
[ -z "$hcidump_path" ] && echo "Error: Required package 'hcidump' not found. Please install 'bluez-hcidump' (e.g., sudo apt-get install bluez-hcidump)." && should_exit=true
[ -z "$bc_path" ] && echo "Error: Required package 'bc' not found. Please install 'bc' (e.g., sudo apt-get install bc)" && should_exit=true
[ -z "$git_path" ] && echo "Warning: Recommended package 'git' not found. Please consider installing for regular updates."
[ ! -z "$(which systemctl)" ] && [ ! -e "$service_path" ] && echo "Warning: monitor.service not installed. Install service? (y/n)" && read should_install

#BASE DIRECTORY REGARDLESS OF INSTALLATION; ELSE MANUALLY SET HERE
base_directory=$(dirname "$(readlink -f "$0")")

#----------------------------------------------------------------------------------------
# CHECK MQTT CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#MQTT PREFERENCES
MQTT_CONFIG="$base_directory/mqtt_preferences"

if [ -f $MQTT_CONFIG ] ; then 
	source $MQTT_CONFIG

	#DOUBLECHECKS 
	[ "$mqtt_address" == "0.0.0.0" ] && echo "Error: Please customize mqtt broker address in: mqtt_preferences" && should_exit=true
	[ "$mqtt_user" == "username" ] && echo "Error: Please customize mqtt username in: mqtt_preferences" && should_exit=true
	[ "$mqtt_password" == "password" ] && echo "Error: Please customize mqtt password in: mqtt_preferences" && should_exit=true
else
	echo "> mosquitto preferences file created. Please customize." 

	#LOAD A DEFULT PREFERENCES FILE
	echo "# ---------------------------" >> "$MQTT_CONFIG"
	echo "#								" >> "$MQTT_CONFIG"
	echo "# MOSQUITTO PREFERENCES" >> "$MQTT_CONFIG"
	echo "#								" >> "$MQTT_CONFIG"
	echo "# ---------------------------" >> "$MQTT_CONFIG"
	echo "" >> "$MQTT_CONFIG"

	echo "# IP ADDRESS OF MQTT BROKER" >> "$MQTT_CONFIG"
	echo "mqtt_address=0.0.0.0" >> "$MQTT_CONFIG"

	echo "" >> "$MQTT_CONFIG"
	echo "# MQTT BROKER USERNAME (OR BLANK FOR NONE)" >> "$MQTT_CONFIG"
	echo "mqtt_user=username" >> "$MQTT_CONFIG"

	echo "" >> "$MQTT_CONFIG"
	echo "# MQTT BROKER PASSWORD (OR BLANK FOR NONE)" >> "$MQTT_CONFIG"
	echo "mqtt_password=password" >> "$MQTT_CONFIG"

	echo "" >> "$MQTT_CONFIG"
	echo "# MQTT PUBLISH TOPIC ROOT " >> "$MQTT_CONFIG"
	echo "mqtt_topicpath=location" >> "$MQTT_CONFIG"

	echo "" >> "$MQTT_CONFIG"
	echo "# PUBLISHER IDENTITY " >> "$MQTT_CONFIG"
	echo "mqtt_publisher_identity=''" >> "$MQTT_CONFIG"

	echo "" >> "$MQTT_CONFIG"
	echo "# MQTT PORT " >> "$MQTT_CONFIG"
	echo "mqtt_port='1883'" >> "$MQTT_CONFIG"

	#SET SHOULD EXIT
	should_exit=true
fi 

#----------------------------------------------------------------------------------------
# CHECK STATIC DEVICE CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#STATIC DEVICES PREFERENCES
PUB_CONFIG="$base_directory/known_static_addresses"

if [ -f "$PUB_CONFIG" ]; then 
	#DOUBLECHECKS 
	[ ! -z "$(cat "$PUB_CONFIG" | grep "^00:00:00:00:00:00")" ] && echo " - Error: Please customize public mac addresses in: known_static_addresses" && should_exit=true
else
	echo "> public MAC address list file created. Please customize."
	#IF NO PUBLIC ADDRESS FILE; LOAD 
	echo "# ---------------------------" >> "$PUB_CONFIG"
	echo "#" >> "$PUB_CONFIG"
	echo "# PUBLIC MAC ADDRESS LIST" >> "$PUB_CONFIG"
	echo "#" >> "$PUB_CONFIG"
	echo "# ---------------------------" >> "$PUB_CONFIG"
	echo "" >> "$PUB_CONFIG"
	echo "00:00:00:00:00:00 Nickname #comment" >> "$PUB_CONFIG"

	#SET SHOULD EXIT
	should_exit=true
fi 

#----------------------------------------------------------------------------------------
# CHECK MONITOR.SERVICE (IF APPLICABLE)
#
#	CREDITS & CONTRIBUTIONS: x99percent 
# ----------------------------------------------------------------------------------------

echo "$RUNTIME_ARGS"

#CHECK FOR CORRECT SERVICE; 
if [ "$should_install" == "y" ]; then 
	#CHECK FOR SYSTEMCTL FILE
	base_directory=$(dirname "$(readlink -f "$0")")

	echo "[Unit]" >> "$service_path"
	echo "Description=Monitor Service" >> "$service_path"
	echo "After=network.target" >> "$service_path"
	echo "" >> "$service_path"
	echo "[Service]" >> "$service_path"
	echo "User=root" >> "$service_path"
	echo "ExecStart=/bin/bash $base_directory/$(basename $0) &" >> "$service_path"
	echo "WorkingDirectory=$base_directory" >> "$service_path"
	echo "Restart=always" >> "$service_path"
	echo "RestartSec=10" >> "$service_path"
	echo "" >> "$service_path"
	echo "[Install]" >> "$service_path"
	echo "WantedBy=multi-user.target network.target" >> "$service_path"

	sleep 3

	sudo systemctl enable monitor.service
fi 


#----------------------------------------------------------------------------------------
# CHECK BEHAVIOR CONFIGURATION FILES
# ----------------------------------------------------------------------------------------

#MQTT PREFERENCES
PREF_CONFIG="$base_directory/behavior_preferences"
[ "$PREF_RESTORE_DEFAULTS" == true ] && rm "$PREF_CONFIG"


if [ -f "$PREF_CONFIG" ]; then 
	source "$PREF_CONFIG"

	echo "> preference: delay between scans = $PREF_INTERSCAN_DELAY" 
	echo "> preference: periodic arrive/depart check interval = $PREF_CLOCK_INTERVAL" 
	echo "> preference: periodic arrive interval = $PREF_ARRIVE_SCAN_INTERVAL" 
	echo "> preference: periodic depart interval = $PREF_DEPART_SCAN_INTERVAL" 

	echo "> preference: database refresh interval = $PREF_DATABASE_REFRESH_INTERVAL" 
	echo "> preference: max arrival scan attempts = $PREF_ARRIVAL_SCAN_ATTEMPTS" 
	echo "> preference: max depart scan attempts = $PREF_DEPART_SCAN_ATTEMPTS" 
	echo "> preference: random advertisement expiration = $PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL" 

else
	echo "> default behavior preferences file created. Please customize to your needs." 

	#LOAD A DEFULT PREFERENCES FILE
	echo "# ---------------------------" >> "$PREF_CONFIG"
	echo "#								" >> "$PREF_CONFIG"
	echo "# BEHAVIOR PREFERENCES" >> "$PREF_CONFIG"
	echo "#								" >> "$PREF_CONFIG"
	echo "# ---------------------------" >> "$PREF_CONFIG"
	echo "" >> "$PREF_CONFIG"

	# ----------------------------------------------------------------------------------------
	# BEHAVIOR PREFERENCES
	# ----------------------------------------------------------------------------------------

	echo "#DETERMINE DELAY BETWEEN SCANS OF DEVICES" >> "$PREF_CONFIG"
	echo "PREF_INTERSCAN_DELAY=3" >> "$PREF_CONFIG"
	echo "" >> "$PREF_CONFIG"
	echo "#DETERMINE HOW OFTEN TO CHECK FOR AN EXPIRED DEVICE OR OR ARRIVED DEVICE" >> "$PREF_CONFIG"
	echo "PREF_CLOCK_INTERVAL=90" >> "$PREF_CONFIG"
	echo "" >> "$PREF_CONFIG"
	echo "#DETERMINE NOW OFTEN TO REFRESH DATABASES TO REMOVE EXPIRED DEVICES" >> "$PREF_CONFIG"
	echo "PREF_DATABASE_REFRESH_INTERVAL=120" >> "$PREF_CONFIG"
	echo "" >> "$PREF_CONFIG"
	echo "#MAX RETRY ATTEMPTS FOR ARRIVAL" >> "$PREF_CONFIG"
	echo "PREF_ARRIVAL_SCAN_ATTEMPTS=2" >> "$PREF_CONFIG"
	echo "" >> "$PREF_CONFIG"
	echo "#MAX RETRY ATTEMPTS FOR DEPART" >> "$PREF_CONFIG"
	echo "PREF_DEPART_SCAN_ATTEMPTS=4" >> "$PREF_CONFIG"
	echo "" >> "$PREF_CONFIG"
	echo "#DEPART SCAN INTERVAL" >> "$PREF_CONFIG"
	echo "PREF_DEPART_SCAN_INTERVAL=120" >> "$PREF_CONFIG"
	echo "" >> "$PREF_CONFIG"
	echo "#ARRIVE SCAN INTERVAL" >> "$PREF_CONFIG"
	echo "PREF_ARRIVE_SCAN_INTERVAL=90" >> "$PREF_CONFIG"
	echo "" >> "$PREF_CONFIG"
	echo "#PERIOD AFTER WHICH A RANDOM BTLE ADVERTISEMENT IS CONSIDERED EXPIRED" >> "$PREF_CONFIG"
	echo "PREF_RANDOM_DEVICE_EXPIRATION_INTERVAL=35" >> "$PREF_CONFIG"

	#LOAD DEFAULT PREFERENCES
	should_exit=true
fi 


#ARE REQUIREMENTS MET? 
[ "$should_exit" == true ] && exit 1

